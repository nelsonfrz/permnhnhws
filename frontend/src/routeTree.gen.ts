/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PermImport } from './routes/perm'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as PermIndexImport } from './routes/perm/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as PermMeasureImport } from './routes/perm/measure'
import { Route as PermCalibrationImport } from './routes/perm/calibration'
import { Route as DashboardStorageImport } from './routes/dashboard/storage'
import { Route as DashboardSimulationImport } from './routes/dashboard/simulation'
import { Route as DashboardSettingsImport } from './routes/dashboard/settings'
import { Route as DashboardCalibrationImport } from './routes/dashboard/calibration'
import { Route as DashboardAnalysisMeasurementImport } from './routes/dashboard/analysis.$measurement'

// Create/Update Routes

const PermRoute = PermImport.update({
  id: '/perm',
  path: '/perm',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PermIndexRoute = PermIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PermRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const PermMeasureRoute = PermMeasureImport.update({
  id: '/measure',
  path: '/measure',
  getParentRoute: () => PermRoute,
} as any)

const PermCalibrationRoute = PermCalibrationImport.update({
  id: '/calibration',
  path: '/calibration',
  getParentRoute: () => PermRoute,
} as any)

const DashboardStorageRoute = DashboardStorageImport.update({
  id: '/storage',
  path: '/storage',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardSimulationRoute = DashboardSimulationImport.update({
  id: '/simulation',
  path: '/simulation',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardSettingsRoute = DashboardSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardCalibrationRoute = DashboardCalibrationImport.update({
  id: '/calibration',
  path: '/calibration',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardAnalysisMeasurementRoute =
  DashboardAnalysisMeasurementImport.update({
    id: '/analysis/$measurement',
    path: '/analysis/$measurement',
    getParentRoute: () => DashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/perm': {
      id: '/perm'
      path: '/perm'
      fullPath: '/perm'
      preLoaderRoute: typeof PermImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/calibration': {
      id: '/dashboard/calibration'
      path: '/calibration'
      fullPath: '/dashboard/calibration'
      preLoaderRoute: typeof DashboardCalibrationImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/simulation': {
      id: '/dashboard/simulation'
      path: '/simulation'
      fullPath: '/dashboard/simulation'
      preLoaderRoute: typeof DashboardSimulationImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/storage': {
      id: '/dashboard/storage'
      path: '/storage'
      fullPath: '/dashboard/storage'
      preLoaderRoute: typeof DashboardStorageImport
      parentRoute: typeof DashboardImport
    }
    '/perm/calibration': {
      id: '/perm/calibration'
      path: '/calibration'
      fullPath: '/perm/calibration'
      preLoaderRoute: typeof PermCalibrationImport
      parentRoute: typeof PermImport
    }
    '/perm/measure': {
      id: '/perm/measure'
      path: '/measure'
      fullPath: '/perm/measure'
      preLoaderRoute: typeof PermMeasureImport
      parentRoute: typeof PermImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/perm/': {
      id: '/perm/'
      path: '/'
      fullPath: '/perm/'
      preLoaderRoute: typeof PermIndexImport
      parentRoute: typeof PermImport
    }
    '/dashboard/analysis/$measurement': {
      id: '/dashboard/analysis/$measurement'
      path: '/analysis/$measurement'
      fullPath: '/dashboard/analysis/$measurement'
      preLoaderRoute: typeof DashboardAnalysisMeasurementImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardCalibrationRoute: typeof DashboardCalibrationRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardSimulationRoute: typeof DashboardSimulationRoute
  DashboardStorageRoute: typeof DashboardStorageRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardAnalysisMeasurementRoute: typeof DashboardAnalysisMeasurementRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardCalibrationRoute: DashboardCalibrationRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardSimulationRoute: DashboardSimulationRoute,
  DashboardStorageRoute: DashboardStorageRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardAnalysisMeasurementRoute: DashboardAnalysisMeasurementRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface PermRouteChildren {
  PermCalibrationRoute: typeof PermCalibrationRoute
  PermMeasureRoute: typeof PermMeasureRoute
  PermIndexRoute: typeof PermIndexRoute
}

const PermRouteChildren: PermRouteChildren = {
  PermCalibrationRoute: PermCalibrationRoute,
  PermMeasureRoute: PermMeasureRoute,
  PermIndexRoute: PermIndexRoute,
}

const PermRouteWithChildren = PermRoute._addFileChildren(PermRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/perm': typeof PermRouteWithChildren
  '/dashboard/calibration': typeof DashboardCalibrationRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/simulation': typeof DashboardSimulationRoute
  '/dashboard/storage': typeof DashboardStorageRoute
  '/perm/calibration': typeof PermCalibrationRoute
  '/perm/measure': typeof PermMeasureRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/perm/': typeof PermIndexRoute
  '/dashboard/analysis/$measurement': typeof DashboardAnalysisMeasurementRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard/calibration': typeof DashboardCalibrationRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/simulation': typeof DashboardSimulationRoute
  '/dashboard/storage': typeof DashboardStorageRoute
  '/perm/calibration': typeof PermCalibrationRoute
  '/perm/measure': typeof PermMeasureRoute
  '/dashboard': typeof DashboardIndexRoute
  '/perm': typeof PermIndexRoute
  '/dashboard/analysis/$measurement': typeof DashboardAnalysisMeasurementRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/perm': typeof PermRouteWithChildren
  '/dashboard/calibration': typeof DashboardCalibrationRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/simulation': typeof DashboardSimulationRoute
  '/dashboard/storage': typeof DashboardStorageRoute
  '/perm/calibration': typeof PermCalibrationRoute
  '/perm/measure': typeof PermMeasureRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/perm/': typeof PermIndexRoute
  '/dashboard/analysis/$measurement': typeof DashboardAnalysisMeasurementRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/perm'
    | '/dashboard/calibration'
    | '/dashboard/settings'
    | '/dashboard/simulation'
    | '/dashboard/storage'
    | '/perm/calibration'
    | '/perm/measure'
    | '/dashboard/'
    | '/perm/'
    | '/dashboard/analysis/$measurement'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/calibration'
    | '/dashboard/settings'
    | '/dashboard/simulation'
    | '/dashboard/storage'
    | '/perm/calibration'
    | '/perm/measure'
    | '/dashboard'
    | '/perm'
    | '/dashboard/analysis/$measurement'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/perm'
    | '/dashboard/calibration'
    | '/dashboard/settings'
    | '/dashboard/simulation'
    | '/dashboard/storage'
    | '/perm/calibration'
    | '/perm/measure'
    | '/dashboard/'
    | '/perm/'
    | '/dashboard/analysis/$measurement'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  PermRoute: typeof PermRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  PermRoute: PermRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/perm"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/calibration",
        "/dashboard/settings",
        "/dashboard/simulation",
        "/dashboard/storage",
        "/dashboard/",
        "/dashboard/analysis/$measurement"
      ]
    },
    "/perm": {
      "filePath": "perm.tsx",
      "children": [
        "/perm/calibration",
        "/perm/measure",
        "/perm/"
      ]
    },
    "/dashboard/calibration": {
      "filePath": "dashboard/calibration.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/settings": {
      "filePath": "dashboard/settings.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/simulation": {
      "filePath": "dashboard/simulation.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/storage": {
      "filePath": "dashboard/storage.tsx",
      "parent": "/dashboard"
    },
    "/perm/calibration": {
      "filePath": "perm/calibration.tsx",
      "parent": "/perm"
    },
    "/perm/measure": {
      "filePath": "perm/measure.tsx",
      "parent": "/perm"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/perm/": {
      "filePath": "perm/index.tsx",
      "parent": "/perm"
    },
    "/dashboard/analysis/$measurement": {
      "filePath": "dashboard/analysis.$measurement.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
